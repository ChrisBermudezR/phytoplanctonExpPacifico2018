measurementFacts_wide_to_long <- tidyr::pivot_longer(measurementFacts_wide,
cols = 2:20,
names_to = "measurementType",
values_to = "measurementValue")
class(measurementFacts_wide$Transparencia)
measurementFacts_wide$Transparencia
measurementFacts_wide<-readxl::read_excel("Datos_Fito_Final.xlsx", sheet = "measurementFacts", na = "NA")
class(measurementFacts_wide$Transparencia)
View(measurementFacts_wide)
measurementFacts_wide<-readxl::read_excel("Datos_Fito_Final.xlsx", sheet = "measurementFacts", na = "NA")
class(measurementFacts_wide$Transparencia)
measurementFacts_wide<-readxl::read_excel("Datos_Fito_Final.xlsx", sheet = "measurementFacts", na = "NA")
class(measurementFacts_wide$Transparencia)
measurementFacts_wide_to_long <- tidyr::pivot_longer(measurementFacts_wide,
cols = 2:20,
names_to = "measurementType",
values_to = "measurementValue")
measurementFacts_wide_to_long %>% mutate(measurementUnit  =
ifelse(measurementType == "Transparencia","m",
ifelse(measurementType == "Temperatura", "°C",
ifelse(measurementType == "Salinidad", "PSU",
ifelse(measurementType == "pH", "pH",
ifelse(measurementType == "NH4", "µM",
ifelse(measurementType == "NO2", "µM",
ifelse(measurementType == "NO3", "µM",
ifelse(measurementType == "PO4", "µM",
ifelse(measurementType == "SiO3", "µM",
ifelse(measurementType == "Clorofila", "g.m¯³",
ifelse(measurementType == "Solidos Suspendidos", "g.mL¯³",
ifelse(measurementType == "BioVolumen_300um", "ml.1000m¯³",
ifelse(measurementType == "Peso.Humedo_300um", "g.1000m¯³",
ifelse(measurementType == "Peso.Seco_300um", "g.1000m¯³",
ifelse(measurementType == "Peso.Sin.Ceniza_300um", "g.1000m¯³",
ifelse(measurementType == "BioVolumen_500um", "ml.1000m¯³",
ifelse(measurementType == "Peso.Humedo_500um", "g.1000m¯³",
ifelse(measurementType == "Peso.Seco_500um", "g.1000m¯³",
ifelse(measurementType == "Peso.Sin.Ceniza_500um", "g.1000m¯³",""
))))))))))))))))))))
levels(as.factor(measurementFacts_wide_to_long$measurementType))
measurementFacts_tablaMerge<-merge(measurementFacts_wide_wide_to_long, eventoTable, by="fieldNumber")
measurementFacts_tablaMerge2<-merge(measurementFacts_tablaMerge, DwC, by="eventID")
View(measure_Tabla_Final)
measure_Tabla_Final<-measurementFacts_tablaMerge2 %>% select(occurrenceID, eventID,measurementType,measurementValue, measurementUnit)
measurementFacts_wide_to_long %>% mutate(measurementUnit  =
ifelse(measurementType == "Transparencia","m",
ifelse(measurementType == "Temperatura", "°C",
ifelse(measurementType == "Salinidad", "PSU",
ifelse(measurementType == "pH", "pH",
ifelse(measurementType == "NH4", "µM",
ifelse(measurementType == "NO2", "µM",
ifelse(measurementType == "NO3", "µM",
ifelse(measurementType == "PO4", "µM",
ifelse(measurementType == "SiO3", "µM",
ifelse(measurementType == "Clorofila", "g.m¯³",
ifelse(measurementType == "Solidos Suspendidos", "g.mL¯³",
ifelse(measurementType == "BioVolumen_300um", "ml.1000m¯³",
ifelse(measurementType == "Peso.Humedo_300um", "g.1000m¯³",
ifelse(measurementType == "Peso.Seco_300um", "g.1000m¯³",
ifelse(measurementType == "Peso.Sin.Ceniza_300um", "g.1000m¯³",
ifelse(measurementType == "BioVolumen_500um", "ml.1000m¯³",
ifelse(measurementType == "Peso.Humedo_500um", "g.1000m¯³",
ifelse(measurementType == "Peso.Seco_500um", "g.1000m¯³",
ifelse(measurementType == "Peso.Sin.Ceniza_500um", "g.1000m¯³",""
))))))))))))))))))))
measurementFacts_wide_to_long<-measurementFacts_wide_to_long %>% mutate(measurementUnit  =
ifelse(measurementType == "Transparencia","m",
ifelse(measurementType == "Temperatura", "°C",
ifelse(measurementType == "Salinidad", "PSU",
ifelse(measurementType == "pH", "pH",
ifelse(measurementType == "NH4", "µM",
ifelse(measurementType == "NO2", "µM",
ifelse(measurementType == "NO3", "µM",
ifelse(measurementType == "PO4", "µM",
ifelse(measurementType == "SiO3", "µM",
ifelse(measurementType == "Clorofila", "g.m¯³",
ifelse(measurementType == "Solidos Suspendidos", "g.mL¯³",
ifelse(measurementType == "BioVolumen_300um", "ml.1000m¯³",
ifelse(measurementType == "Peso.Humedo_300um", "g.1000m¯³",
ifelse(measurementType == "Peso.Seco_300um", "g.1000m¯³",
ifelse(measurementType == "Peso.Sin.Ceniza_300um", "g.1000m¯³",
ifelse(measurementType == "BioVolumen_500um", "ml.1000m¯³",
ifelse(measurementType == "Peso.Humedo_500um", "g.1000m¯³",
ifelse(measurementType == "Peso.Seco_500um", "g.1000m¯³",
ifelse(measurementType == "Peso.Sin.Ceniza_500um", "g.1000m¯³",""
))))))))))))))))))))
levels(as.factor(measurementFacts_wide_to_long$measurementType))
measurementFacts_tablaMerge<-merge(measurementFacts_wide_wide_to_long, eventoTable, by="fieldNumber")
measurementFacts_tablaMerge2<-merge(measurementFacts_tablaMerge, DwC, by="eventID")
measure_Tabla_Final<-measurementFacts_tablaMerge2 %>% select(occurrenceID, eventID,measurementType,measurementValue, measurementUnit)
measurementFacts_tablaMerge
measurementFacts_wide_to_long
measurementFacts_tablaMerge<-merge(measurementFacts_wide_to_long, eventoTable, by="fieldNumber")
measurementFacts_tablaMerge2<-merge(measurementFacts_tablaMerge, DwC, by="eventID")
measure_Tabla_Final<-measurementFacts_tablaMerge2 %>% select(occurrenceID, eventID,measurementType,measurementValue, measurementUnit)
View(measure_Tabla_Final)
measurementFacts_tablaMerge2<-merge(measurementFacts_tablaMerge, DwC$occurrenceID, by="eventID")
measurementFacts_tablaMerge<-dplyr::merge(measurementFacts_wide_to_long, eventoTable, by="fieldNumber")
measurementFacts_tablaMerge<-tidyr::merge(measurementFacts_wide_to_long, eventoTable, by="fieldNumber")
measurementFacts_tablaMerge<-base::merge(measurementFacts_wide_to_long, eventoTable, by="fieldNumber")
measure_Tabla_Final<-measurementFacts_tablaMerge2 %>% dplyr::select(occurrenceID, eventID,measurementType,measurementValue, measurementUnit)
write.table(
measure_Tabla_Final,
file = "../DwC/measurementFacts.csv",
col.names = TRUE,
row.names = FALSE,
sep = ",",
fileEncoding = "UTF-8",
na = "")
#Carga de la tabla inicial####
data<-readxl::read_excel("Datos_Fito_Final.xlsx", sheet = "Formato")
if(!require(worrms)){install.packages("worrms")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(purrr)){install.packages("purrr")}
if(!require(writexl)){install.packages("writexl")}
if(!require(algaeClassify)){install.packages("algaeClassify")}
if(!require(rgbif)){install.packages("rgbif")}
if(!require(inborutils)){remotes::install_github("inbo/inborutils")}
#Carga de la tabla inicial####
data<-readxl::read_excel("Datos_Fito_Final.xlsx", sheet = "Formato")
#Selección de los datos
especies<-colnames(data[7:53])
View(data)
#Selección de los datos
especies<-colnames(data[7:50])
verbatimIdentification_df<-as.data.frame(especies)
taxa_df<-cbind(verbatimIdentification_df, as.data.frame(especies))
colnames(taxa_df)<-c("verbatimIdentification", "scientificName")
taxa_df
Especies<-levels(as.factor(taxa_df$scientificname))
colnames(taxa_df)<-c("verbatimIdentification", "scientificName")
Especies<-levels(as.factor(taxa_df$scientificName))
Especies
matchedTaxa<-worrms::wm_records_taxamatch(taxa_df$scientificName, marine_only = TRUE, kingdom = "chromista")
View(matchedTaxa)
View(matchedTaxa)
lista_principal <- stats::setNames(matchedTaxa, taxa_df$verbatimIdentification)
lista_principal
# Unir los dataframes en uno solo
df <- dplyr::bind_rows(lista_principal)
View(df)
levels(taxa_df$verbatimIdentification)
taxa_df$verbatimIdentification
#Carga de la tabla inicial####
data<-readxl::read_excel("Datos_Fito_Final.xlsx", sheet = "Formato")
#Selección de los datos
especies<-colnames(data[7:50])
#Selección de los datos
especies<-colnames(data[7:49])
verbatimIdentification_df<-as.data.frame(especies)
taxa_df<-cbind(verbatimIdentification_df, as.data.frame(especies))
colnames(taxa_df)<-c("verbatimIdentification", "scientificName")
Especies<-levels(as.factor(taxa_df$scientificName))
matchedTaxa<-worrms::wm_records_taxamatch(taxa_df$scientificName, marine_only = TRUE, kingdom = "chromista")
lista_principal <- stats::setNames(matchedTaxa, taxa_df$verbatimIdentification)
# Unir los dataframes en uno solo
df <- dplyr::bind_rows(lista_principal)
df$phylum
View(df)
taxa_df$verbatimIdentification
#Carga de la tabla inicial####
data<-readxl::read_excel("Datos_Fito_Final.xlsx", sheet = "Formato")
#Selección de los datos
especies<-colnames(data[7:49])
verbatimIdentification_df<-as.data.frame(especies)
taxa_df<-cbind(verbatimIdentification_df, as.data.frame(especies))
colnames(taxa_df)<-c("verbatimIdentification", "scientificName")
Especies<-levels(as.factor(taxa_df$scientificName))
matchedTaxa<-worrms::wm_records_taxamatch(taxa_df$scientificName, marine_only = TRUE, kingdom = "chromista")
lista_principal <- stats::setNames(matchedTaxa, taxa_df$verbatimIdentification)
# Unir los dataframes en uno solo
df <- dplyr::bind_rows(lista_principal)
View(df)
levels(as.factor(df$phylum))
# Unir los dataframes en uno solo
df <- dplyr::bind_rows(lista_principal)
levels(as.factor(df$phylum))
df<-df %>% filter( phylum== "Cyanobacteria" |
phylum== "Myzozoa" |
phylum== "Heterokontophyta" |
phylum== "Ochrophyta")
View(df)
levels(as.factor(df$scientificName))
levels(as.factor(taxa_df$scientificName))
levels(as.factor(df$scientificname))
levels(as.factor(taxa_df$scientificName))
verbatimIdentification<-taxa_df$verbatimIdentification
taxonomia_final<-cbind(df, verbatimIdentification)
if(!require(worrms)){install.packages("worrms")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(tidyr)){install.packages("tidyr")}
if(!require(writexl)){install.packages("writexl")}
if(!require(worrms)){install.packages("worrms")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(tidyr)){install.packages("tidyr")}
if(!require(writexl)){install.packages("writexl")}
wide<-readxl::read_excel("Datos_Fito_Final.xlsx", sheet = "wide")
colnames(wide)
wide_to_long <- tidyr::pivot_longer(wide,
cols = 11:53,
names_to = "verbatimIdentification",
values_to = "individualCount")
rm(wide_prueba)
rm(wide_prueba_long)
View(wide_to_long)
source("calculo_densidad.R")
calculo_densidad(wide_to_long$individualCount, wide_to_long$diametro_campo, wide_to_long$N_campos, wide_to_long$Vol_Muestra_concentrada, wide_to_long$no_alicuotas, wide_to_long$Vol_Muestreado)
Matriz_Densidad_long<-wide_prueba_long %>% mutate(organismQuantity = densidadCalculada,
confianza = 2/sqrt(individualCount)*100
)
Matriz_Densidad_long<-wide_to_long %>% mutate(organismQuantity = densidadCalculada,
confianza = 2/sqrt(individualCount)*100
)
Matriz_Densidad_long
Matriz_Densidad_long<-wide_to_long %>% mutate(organismQuantity = densidadCalculada,
confianza = 2/sqrt(individualCount)*100
)
View(Matriz_Densidad_long)
calculo_densidad(wide_to_long$individualCount, wide_to_long$diametro_campo, wide_to_long$N_campos, wide_to_long$Vol_Muestra_concentrada, wide_to_long$no_alicuotas, wide_to_long$Vol_Muestreado)
Matriz_Densidad_long<-wide_to_long %>% mutate(organismQuantity = densidadCalculada,
confianza = 2/sqrt(individualCount)*100
)
View(Matriz_Densidad_long)
source("calculo_densidad.R")
calculo_densidad(wide_to_long$individualCount, wide_to_long$diametro_campo, wide_to_long$N_campos, wide_to_long$Vol_Muestra_concentrada, wide_to_long$no_alicuotas, wide_to_long$Vol_Muestreado)
source("calculo_densidad.R")
calculo_densidad(wide_to_long$individualCount,
wide_to_long$diametro_campo,
wide_to_long$N_campos,
wide_to_long$Vol_Muestra_concentrada,
wide_to_long$no_alicuotas,
wide_to_long$Vol_Alicuota,
wide_to_long$Vol_Muestreado)
Matriz_Densidad_long<-wide_to_long %>% mutate(organismQuantity = densidadCalculada,
confianza = 2/sqrt(individualCount)*100
)
View(Matriz_Densidad_long)
wide_to_long$Vol_Muestreado
source("calculo_densidad.R")
calculo_densidad(wide_to_long$individualCount,
wide_to_long$diametro_campo,
wide_to_long$N_campos,
wide_to_long$Vol_Muestra_concentrada,
wide_to_long$no_alicuotas,
wide_to_long$Vol_Alicuota,
wide_to_long$Vol_Muestreado)
Matriz_Densidad_long<-wide_to_long %>% mutate(organismQuantity = densidadCalculada,
confianza = 2/sqrt(individualCount)*100
)
View(Matriz_Densidad_long)
NmL
volumenCampo=     ((3.1416*(1.798333214/2)^2)*75)
volumenCampo
volumenCampo=     (3.1416*(1.798333214/2)^2)
NmL=(individualCount*1000) /(volumenCampo*75)
NmL
NmL=(8*1000) /(volumenCampo*75)
NmL
densidadCalculada=       (NmL*500) /(0.02*20)
densidadCalculada
source("calculo_densidad.R")
calculo_densidad(wide_to_long$individualCount,
wide_to_long$diametro_campo,
wide_to_long$N_campos,
wide_to_long$Vol_Muestra_concentrada,
wide_to_long$no_alicuotas,
wide_to_long$Vol_Alicuota,
wide_to_long$Vol_Muestreado)
Matriz_Densidad_long<-wide_to_long %>% mutate(organismQuantity = densidadCalculada,
confianza = 2/sqrt(individualCount)*100
)
View(Matriz_Densidad_long)
Matriz_Densidad_long<-wide_to_long %>% mutate(organismQuantity = densidadCalculada,
confianza = 2/sqrt(individualCount)*100
)
eventoTable<-read.csv2("../DwC/event.csv", header = TRUE, sep=",")
tablaMerge<-merge(Matriz_Densidad_long, eventoTable, by="fieldNumber")
#occurrenceID####
occurrenceID_secuencia<-as.data.frame(seq(1:1598))
#occurrenceID####
occurrenceID_secuencia<-as.data.frame(seq(1:1462))
colnames(occurrenceID_secuencia)<-"occurrenceID_secuencia"
bindTabla<-cbind(occurrenceID_secuencia, tablaMerge$eventID)
bindTabla<-bindTabla%>% mutate(occurrenceID = paste0(bindTabla$`tablaMerge$eventID`,":",bindTabla$occurrenceID_secuencia))
occurrenceID<-as.data.frame(bindTabla[,3])
colnames(occurrenceID)<-"occurrenceID"
tablaMerge<-cbind(occurrenceID, tablaMerge)
#basisOfRecord####
basisOfRecord<-as.data.frame(rep("HumanObservation", time=1462))
colnames(basisOfRecord)="basisOfRecord"
type<-as.data.frame(rep("Event", time=1462))
colnames(type)="type"
institutionCode<-as.data.frame(tablaMerge$institutionCode)
colnames(institutionCode)="institutionCode"
institutionID<-as.data.frame(tablaMerge$institutionID)
colnames(institutionID)="institutionID"
datasetName<-as.data.frame(tablaMerge$datasetName)
colnames(datasetName)="datasetName"
datasetID<-as.data.frame(tablaMerge$datasetID)
colnames(datasetID)="datasetID"
language<-as.data.frame(tablaMerge$language)
colnames(language)="language"
rightsHolder<-as.data.frame(tablaMerge$rightsHolder)
colnames(rightsHolder)="rightsHolder"
accessRights<-as.data.frame(rep("Sólo para uso no comercial", time=1462))
colnames(accessRights)="accessRights"
references<-as.data.frame(tablaMerge$references)
colnames(references)="references"
ownerInstitutionCode<-as.data.frame(rep("Centro de Investigaciones Oceanográficas e Hidrográficas del Pacífico - Dirección General Marítima (DIMAR)", time=1462))
colnames(ownerInstitutionCode)="ownerInstitutionCode"
#recordedBy####
recordNumber<-as.data.frame(rep("Exp.Pacifico2018", time=1462))
colnames(recordNumber)="recordNumber"
#recordedBy####
recordedBy<-as.data.frame(rep("Fredy Albeiro Castrillón Valencia", time=1462))
colnames(recordedBy)="recordedBy"
recordedByID<-as.data.frame(rep("https://orcid.org/0000-0003-2815-6122", time=1462))
colnames(recordedByID)="recordedByID"
individualCount<-as.data.frame(tablaMerge$individualCount)
colnames(individualCount)="individualCount"
organismQuantity<-as.data.frame(as.integer(round(tablaMerge$organismQuantity)))
colnames(organismQuantity)="organismQuantity"
organismQuantityType<-as.data.frame(rep("Células por litro", time=1462))
colnames(organismQuantityType)="organismQuantityType"
occurrenceStatus<-as.data.frame(individualCount%>%mutate(occurrenceStatus= ifelse(individualCount > 0, "present", "absent")))
occurrenceStatus<-as.data.frame(occurrenceStatus[,2])
colnames(occurrenceStatus)="occurrenceStatus"
#parentEventID####
parentEventID<-as.data.frame(tablaMerge$parentEventID)
colnames(parentEventID)="parentEventID"
#eventID####
eventID<-as.data.frame(tablaMerge$eventID)
colnames(eventID)="eventID"
#samplingProtocol####
samplingProtocol<-as.data.frame(tablaMerge$samplingProtocol)
colnames(samplingProtocol)="samplingProtocol"
#sampleSizeValue####
sampleSizeValue<-as.data.frame(tablaMerge$sampleSizeValue)
colnames(sampleSizeValue)="sampleSizeValue"
#sampleSizeUnit####
sampleSizeUnit<-as.data.frame(tablaMerge$sampleSizeUnit)
colnames(sampleSizeUnit)="sampleSizeUnit"
#samplingEffort####
samplingEffort<-as.data.frame(tablaMerge$samplingEffort)
colnames(samplingEffort)="samplingEffort"
#eventDate####
eventDate<-as.data.frame(as.Date(tablaMerge$eventDate, format ="%Y-%m-%d"))
colnames(eventDate)="eventDate"
#year####
year<-as.data.frame(tablaMerge$year)
colnames(year)="year"
#month####
month<-as.data.frame(tablaMerge$month)
colnames(month)="month"
#day####
day<-as.data.frame(tablaMerge$day)
colnames(day)="day"
#eventTime####
eventTime<-as.data.frame(tablaMerge$eventTime)
colnames(eventTime)="eventTime"
#habitat####
habitat<-as.data.frame(tablaMerge$habitat)
colnames(habitat)="habitat"
#fieldNumber####
fieldNumber<-as.data.frame(tablaMerge$fieldNumber)
colnames(fieldNumber)="fieldNumber"
#eventRemarks####
eventRemarks<-as.data.frame(tablaMerge$eventRemarks)
colnames(eventRemarks)="eventRemarks"
#locationID####
locationID<-as.data.frame(tablaMerge$locationID)
colnames(locationID)="locationID"
#higherGeography####
higherGeography<-as.data.frame(tablaMerge$higherGeography)
colnames(higherGeography)="higherGeography"
#continent####
continent<-as.data.frame(tablaMerge$continent)
colnames(continent)="continent"
#waterBody####
waterBody<-as.data.frame(tablaMerge$waterBody)
colnames(waterBody)="waterBody"
#country####
country<-as.data.frame(tablaMerge$country)
colnames(country)="country"
#country####
countryCode<-as.data.frame(tablaMerge$countryCode)
colnames(countryCode)="countryCode"
#locality####
locality<-as.data.frame(tablaMerge$locality)
colnames(locality)="locality"
#minimumDepthInMeters####
minimumDepthInMeters<-as.data.frame(tablaMerge$minimumDepthInMeters)
colnames(minimumDepthInMeters)="minimumDepthInMeters"
#maximumDepthInMeters####
maximumDepthInMeters<-as.data.frame(tablaMerge$maximumDepthInMeters)
colnames(maximumDepthInMeters)="maximumDepthInMeters"
#decimalLatitude####
decimalLatitude<-as.data.frame(tablaMerge$decimalLatitude)
colnames(decimalLatitude)="decimalLatitude"
#decimalLongitude####
decimalLongitude<-as.data.frame(tablaMerge$decimalLongitude)
colnames(decimalLongitude)="decimalLongitude"
#geodeticDatum####
geodeticDatum<-as.data.frame(tablaMerge$geodeticDatum)
colnames(geodeticDatum)="geodeticDatum"
#georeferencedBy####
georeferencedBy<-as.data.frame(tablaMerge$georeferencedBy)
colnames(georeferencedBy)="georeferencedBy"
#identifiedBy####
identifiedBy<-as.data.frame(rep("Fredy Albeiro Castrillón Valencia", time=1462))
colnames(identifiedBy)="identifiedBy"
identifiedByID<-as.data.frame(rep("https://orcid.org/0000-0003-2815-6122", time=1462))
colnames(identifiedByID)="identifiedByID"
dateIdentified<-as.data.frame(rep("2019-02-11/2019-04-30", time=1462))
colnames(dateIdentified)="dateIdentified"
#verbatimIdentification####
verbatimIdentification<-as.data.frame(tablaMerge$verbatimIdentification)
colnames(verbatimIdentification)="verbatimIdentification"
TablaFinal<-cbind(occurrenceID,
basisOfRecord,
type,
institutionCode,
institutionID,
datasetName,
datasetID,
language,
rightsHolder,
accessRights,
references,
ownerInstitutionCode,
recordNumber,
recordedBy,
recordedByID,
individualCount,
organismQuantity,
organismQuantityType,
occurrenceStatus,
parentEventID,
eventID,
samplingProtocol,
sampleSizeValue,
sampleSizeUnit,
samplingEffort,
eventDate,
year,
month,
day,
eventTime,
habitat,
fieldNumber,
eventRemarks,
locationID,
higherGeography,
continent,
waterBody,
country,
countryCode,
locality,
minimumDepthInMeters,
maximumDepthInMeters,
decimalLatitude,
decimalLongitude,
geodeticDatum,
georeferencedBy,
identifiedBy,
identifiedByID,
dateIdentified,
verbatimIdentification
)
taxonomia_final
write_xlsx(taxonomia_final, "matched_Total.xlsx")
#Taxonomía####
taxonomia<-readxl::read_excel("matched_Total.xlsx", sheet = "Sheet1")
taxonomia<-taxonomia%>%select(verbatimIdentification,
scientificname,
authority,
url,
lsid,
status,
kingdom,
phylum,
class,
order,
family,
genus)
colnames(taxonomia)<-c("verbatimIdentification",
"scientificName",
"scientificNameAuthorship",
"taxonID",
"scientificNameID",
"taxonRank",
"kingdom",
"phylum",
"class",
"order",
"family",
"genus")
taxonomia$verbatimIdentification<-dplyr::recode_factor(taxonomia$verbatimIdentification,
'Pseudo-nitzschia' = "Pseudonizschia")
TablaFinal$verbatimIdentification<-dplyr::recode_factor(TablaFinal$verbatimIdentification,
'Pseudo-nitzschia' = "Pseudonizschia")
DwC<-merge(TablaFinal,taxonomia, by= "verbatimIdentification")
DwC<-DwC%>%arrange(occurrenceID)
View(DwC)
write.table(
DwC,
file = "../DwC/Occurrence.csv",
col.names = TRUE,
row.names = FALSE,
sep = ",",
fileEncoding = "UTF-8",
na = ""
)
